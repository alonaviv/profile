===========

* Have the details in read be bigger.


* Work on all forms of deletion:
 - Think about the fact that teachers can stop being chonchim next year and other changes that could happen between years.
 - Save evaluations that were actually deleted. Focuse on the automatic deletion of evaluations when student leaves a class/class is deleted. Not sure we ever want to delete an evaluation, we'll see. And if we do, make sure that we don't delete evaluations from previous semesters.
 - Need to change alert message when deleting student?

* "Forgot password" mechanism - also, double checking password seems important here.

* When in NULL-SEMESTER, don't allow to fill out any evals, and display in the square that there are no more meetings
this year. Also make sure that nothing can get a null semester value.

* Add sex to registration, and then you can write text accordingly.
* See if possible to add sex to students as well, for text

* If they change existing text to other text in evaluation, ask if they are sure.

* Bug - seems can't add evaluations of same trimester and different years

* Format the forms. In the write review form for a class, show on the top again how many you wrote. 
Also, have a sign of green or red next to each review, to see if it was submitted successfully. Tricky work with the form formatting. Do the same with adding students to classes.

* See if you should pay for backups on digital ocean.

* Think about several teacher teaching same class, sometimes it means a few topics


==================================================

* Have a running task that all kids have a homeroom teacher. If they don't, maybe send an email to Dalit or me. 

* I think we should maybe define two stages - first all teachers have to create their classes and home rooms. Then I should run verifications on the database. The divuchim adding part can be orthoganal. The main thing to check is that all kids have a homeroom teacher that can track them. 

===========
Stupid things teachers might do and I should validate.

* Not have any classes
* Not be added at all to the database. Need to check the teacher users against a static list of their names I think. Maybe go back and decide that the teachers should actually be static - only then someone else could somehow take their spot? I actually think that's better - have a new user associated with the teacher, and then only those teachers can register, and we can validate that all teachers have a user defined. 
* Not add any kids to homerooms - the validation of kids in homeroom will find that.
* Not add all the kids to their classes - nothing to do about that, but we should make sure that their classes all have at least one kid (or maybe more?)
* Think about the issue of the fact that evaluations are deleted when a kid is removed from a class. Is this OK?

I think I should implement all these things as clean methods for the models - and then have something that runs clean on all of them. clean should maybe just return a boolean. Or maybe a different name, so I can use clean for models that should never be created that way. Maybe use validate() 

======================
Additions later on:
* Filter forms by letters maybe?
* Search for a kid's name, don't just select all from a form.
use javascript to make all of this responsive.
* Add subjects that teachers in general teach to their user (can be several or none), Use that for default for all their classes when they add in a new class.
* Pagination everywhere
* Request email and password twice in register form
* Use django authentication backend instead of creating a needless username from first+last name
* For next time - add viewing of previous evalutions - both written by
* Ability to upload files with the evaluations
* Email them the status every so often
* Cute encoureging messages as they progress through it.
