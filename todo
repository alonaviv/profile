Cron (Check out django-cronjobs and django-crontab for this):
 * Send evaluation status emails, every 4 days.
 * Send urgent validation emails, every day.
 * Run ./manage dbbackup, and delete old ones (each time you create one, delete an old one - if you passed either number
  or space). Every day.



Can happen slightly later but during this trimester:
* Add to the regular validation checks - are there teachers without any class, or teachers with empty classes.
* Write raw emails as well, don't forgot raw validation email. Need to add the template
in settings: EMAIL_MAIL_PLAIN. See how to get raw emails to have the link. See about verification email in the school's
gmail.
* Change student gender display
* Small bug - error is in english and not nice when trying to add students to class/homeroom without selecting them.
* Add logging, especially when sending emails.
* Don't need to go into the edit of an empty class to delete it. The trash icon will appear in the general list of
classes.
* When adding students form, have the form line them up so it's easy to see what box belongs to who
* Make list of classes with bullets and not look like a link. Also, link to read evaluations there.
* Improve security (https/TLS)
* Move digital ocean account to dedicated user with password - not my gmail


- Nice to have:
* Emails in RTL on gmail somehow + Make nice HTML emails (even just some bold could help)
* Downloadable PDF
* OTP login
* Ability to upload files with the evaluations


- Must for next semesters:
* Add viewing of previous evaluations - both written by and previous for that student, when being read by
the homeroom teaher (So homeroom teacher can see all evals from all years of his students this year.
(Ask them if they wany that). Pay attention to evals written by a class that was then deleted. Looking up eval objects
doesn't return them. You need to find some solution for this.
* Comprehensive automation, maybe even selenium?
* Implement a way to delete students and teachers: See below all rules about that.
* Implement a safe way to restore deleted students and teachers.
* When working on deletion, add more safeguards such as preventing batch deletion. Also maybe have a better
relationship between models when soft deleting them.
Read this post again: https://blog.usebutton.com/cascading-soft-deletion-in-django
* Currently I manually check if all evals of a class are empty before deleting. Once I have tests and am comfortable
making changes, change it to use Evaluation.is_empty instead - by implementing a custom QuerySet:
https://stackoverflow.com/questions/50401922/include-a-django-model-object-property-using-annotate

- Must for next year:
* Test that moving to next year works well - I didn't really do that.
* Need to have a process at the start of the year that removes all homerooms (do we want to
save a record of the homerooms between years?)
* Bug - seems can't add evaluations of same trimester and different years
* Think about the fact that teachers can stop being chonchim next year and other changes that could happen between years
* When in NULL-SEMESTER, don't allow to fill out any evals, and display in the square that there are no more meetings
this year. Also make sure that nothing can get a null semester value.


====================
Rules to enforce when deleting teachers and students and classes (of course by delete I mean soft delete - add
is_deleted):
* TeacherUser can't be deleted if he is teaching active classes or has kids in homeroom. When you delete a teacheruser,
you also soft delete its teacher object.
* Class can't be deleted if it has students in it. Classes of a year that passed don't get deleted,
it just has a previous year. The only reason that a class can get deleted is if a teacher changes his mind in the middle
of that year. But the evaluations will still stay there. Currently this is enforced by frontend. Can't delete classes
with students.
* (Student can get deleted at any time. He won't show up anywhere. But his evaluations will stay.)



======================
Possible, not very important, additions for later on:
* Filter forms by letters maybe?
* Search for a kid's name, don't just select all from a form.
use javascript to make all of this responsive.
* Add subjects that teachers in general teach to their user (can be several or none), Use that for default for all their classes when they add in a new class.
* Pagination everywhere
* Use django authentication backend instead of creating a needless username from first+last name
* Cute encouraging messages as they progress through it.
* Deal with teachers and students with same name, together in school and after one is deleted.
Right now it's a big problem - see in the design doc, under teacher deletion
* Consider encrypting the evaluations
* I think pronoun is the wrong name here
